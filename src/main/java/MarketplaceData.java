import java.util.Map;
import java.util.HashMap;
import java.util.List;
import java.util.ArrayList;
public class MarketplaceData {
    //Autogenerated ID, when new customer or product will be added ID will increase by one
    private static int nextNewUserId = 0;
    private static int nextNewProductId = 0;
    //Here object key is customer ID
    private Map<Integer,Customer> customers=new HashMap<>();
    //Here object key is product ID
    private Map<Integer,Product> products=new HashMap<>();
    //Here key is customer's ID and object is a list of purchased products IDs.
    private Map<Integer, List<Integer>> purchases = new HashMap<>();

    public static int getNextNewUserId() {
        return nextNewUserId;
    }

    public static void setNextNewUserId(int nextNewUserId) {
        MarketplaceData.nextNewUserId = nextNewUserId;
    }

    public static int getNextNewProductId() {
        return nextNewProductId;
    }

    public static void setNextNewProductId(int nextNewProductId) {
        MarketplaceData.nextNewProductId = nextNewProductId;
    }

    public Map<Integer, Customer> getCustomers() {
        return customers;
    }

    public void setCustomers(Map<Integer, Customer> customers) {
        this.customers = customers;
    }

    public Map<Integer, Product> getProducts() {
        return products;
    }

    public void setProducts(Map<Integer, Product> products) {
        this.products = products;
    }

    public Map<Integer, List<Integer>> getPurchases() {
        return purchases;
    }

    public void setPurchases(Map<Integer, List<Integer>> purchases) {
        this.purchases = purchases;
    }

    public void addCustomer(String fistName, String lastName, double amountOfMoney) throws Exception{
        if(fistName.equals("")){
            throw new Exception("The customer's first name can not be empty");
        }
        else if (lastName.equals("")){
            throw new Exception("The customer's last name can not be empty");
        }
        else if (amountOfMoney<0){
            throw new Exception("The customer's amount of money have to be above 0");
        }
        else{
            Customer newCustomer = new Customer(fistName,lastName,amountOfMoney);
            purchases.put(nextNewUserId,new ArrayList<>());
            customers.put(nextNewUserId,newCustomer);
            nextNewUserId++;
        }
    }

    public void addProduct(String name, double price) throws Exception{
        if(name.equals("")) throw new Exception("The product's name can not be empty");
        else if (price <0) throw new Exception("The product's price have to be above 0");
        else{
            Product newProduct = new Product(name, price);
            products.put(nextNewProductId,newProduct);
            nextNewProductId++;
        }
    }

    public void displayListOfAllProducts(){
        if(products.size()==0) System.out.println("The list of products is empty");
        else{
            System.out.println("List of all products:");
            System.out.println("ID      Name       Price");
            for (Map.Entry<Integer, Product> product : products.entrySet()) {
                System.out.print(product.getKey() + "        ");
                System.out.print(product.getValue().getName() + "        ");
                System.out.println(product.getValue().getPrice());
            }
        }
    }

    public void displayListOfAllCustomers(){
        if(customers.size()==0) System.out.println("The list of customers is empty");
        else{
            System.out.println("List of all customers:");
            System.out.println("ID      First name      Last name       Amount of money");
            for (Map.Entry<Integer, Customer> customer : customers.entrySet()) {
                System.out.print(customer.getKey() + "        ");
                System.out.print(customer.getValue().getFirstName() + "        ");
                System.out.print(customer.getValue().getLastName() + "        ");
                System.out.println(customer.getValue().getAmountOfMoney());
            }
        }
    }

    public void buyProduct(int customerId, int productId) throws Exception{
        if(!customers.containsKey(customerId)){
            throw new Exception("There is no customer with such ID");
        }else if(!products.containsKey(productId)){
            throw new Exception("There is no customer with such ID");
        }else if(customers.get(customerId).getAmountOfMoney()<products.get(productId).getPrice()){
            throw new Exception("The customer do not have enough money to buy this product");
        }else{
            double currentAmountOfMoney = customers.get(customerId).getAmountOfMoney();
            double priceOfProduct = products.get(productId).getPrice();
            customers.get(customerId).setAmountOfMoney(currentAmountOfMoney-priceOfProduct);
            purchases.get(customerId).add(productId);
        }
    }

    public void deleteProduct(int productId) throws Exception{
        if(!products.containsKey(productId)){
            throw new Exception("There is no product with such ID");
        }else{
            for(Map.Entry<Integer, List<Integer>> user : purchases.entrySet()){
                for(int i =0;i<user.getValue().size();i++){
                    //Removes from all customer purchases
                    if(user.getValue().get(i)==productId) user.getValue().remove(i);
                }
            }
            products.remove(productId);
        }
    }

    public void displayCustomerPurchases(int customerId){
        if (purchases.get(customerId).size()==0) System.out.println("The list of customer's purchases is empty");
        else {
            System.out.println("List of customer's purchases:");
            System.out.println("Product ID     Name        Price");
            for (int purchaseId : purchases.get(customerId)) {
                System.out.println(purchaseId + "          " +
                        products.get(purchaseId).getName() + "          " +
                        products.get(purchaseId).getPrice());

            }
        }
    }
    //Display all customers that bought this product
    public void displayCustomersWithProduct(int productId) {
        boolean isSbBoughtProduct = false;
        System.out.println("List of customers who bought this product:");
        System.out.println("Customer ID         Name");
        for (Map.Entry<Integer, List<Integer>> user : purchases.entrySet()) {
            for (int i = 0; i < user.getValue().size(); i++) {
                if (user.getValue().get(i) == productId) {
                    System.out.println(user.getKey()+"         "+
                            customers.get(user.getKey()).getFirstName()+" "+
                            customers.get(user.getKey()).getLastName());
                    isSbBoughtProduct =true;
                }
            }
        }
        if(!isSbBoughtProduct) System.out.println("Nobody has bought this product yet");
    }

}
